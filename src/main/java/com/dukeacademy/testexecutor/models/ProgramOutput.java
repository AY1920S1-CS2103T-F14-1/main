package com.dukeacademy.testexecutor.models;

import java.util.Optional;

/**
 * Represents output generated by programs ran by the application.
 */
public class ProgramOutput {
    private String output;
    private RuntimeError error;

    private ProgramOutput() {
        this.output = "";
    }

    private ProgramOutput(String output) {
        this.output = output;
    }

    public String getOutput() {
        return this.output;
    }

    public Optional<RuntimeError> getRuntimeError() {
        return Optional.ofNullable(this.error);
    }

    /**
     * Adds a string to the end of the program output.
     * @param output The string to be appended.
     * @return newly amended output.
     */
    public ProgramOutput append(String output) {
        String newOutput = this.output += output;
        return new ProgramOutput(newOutput);
    }

    /**
     * Joins another program output to the end of the current output.
     * @param output The output to be appended.
     * @return newly amended output.
     */
    public ProgramOutput append(ProgramOutput output) {
        return this.append(output.getOutput());
    }

    /**
     * Adds a string to the end of the program output as a new line.
     * @param output The string to be appended.
     * @return newly amended output.
     */
    public ProgramOutput appendNewLine(String output) {
        String newOutput = this.output += output + "\n";
        return new ProgramOutput(newOutput);
    }

    /**
     * Joins another program output to the end of the current output after a new line.
     * @param output The output to be appended.
     * @return newly amended output.
     */
    public ProgramOutput appendNewLine(ProgramOutput output) {
        return this.appendNewLine(output.getOutput());
    }

    public static ProgramOutput getEmptyProgramOutput() {
        return new ProgramOutput();
    }

    public static ProgramOutput getErroredProgramOutput(String errorMessage) {
        ProgramOutput output = new ProgramOutput();
        output.error = new RuntimeError(errorMessage);
        return output;
    }
}
