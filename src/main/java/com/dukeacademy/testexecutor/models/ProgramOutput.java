package com.dukeacademy.testexecutor.models;

import static java.util.Objects.requireNonNull;

import java.util.Optional;

import com.dukeacademy.testexecutor.exceptions.ProgramOutputException;

/**
 * Represents output generated by programs ran by the application. Guarantees that errored ProgramOutputs will have
 * an empty output.
 */
public class ProgramOutput {
    private final String output;
    private final RuntimeError error;

    private ProgramOutput() {
        this.output = "";
        this.error = null;
    }

    private ProgramOutput(String output) {
        this.output = output;
        this.error = null;
    }

    private ProgramOutput(RuntimeError error) {
        this.output = "";
        this.error = error;
    }

    public static ProgramOutput getEmptyProgramOutput() {
        return new ProgramOutput();
    }

    public static ProgramOutput getErroredProgramOutput(String errorMessage) {
        requireNonNull(errorMessage);

        ProgramOutput output = new ProgramOutput(new RuntimeError(errorMessage));
        return output;
    }


    public String getOutput() {
        return this.output;
    }

    public Optional<RuntimeError> getRuntimeError() {
        return Optional.ofNullable(this.error);
    }

    /**
     * Adds a string to the end of the program output.
     * @param output The string to be appended.
     * @return newly amended output.
     */
    public ProgramOutput append(String output) {
        if (this.error != null) {
            throw new ProgramOutputException("Program output is already errored");
        }

        String newOutput = this.output + output;
        return new ProgramOutput(newOutput);
    }

    /**
     * Joins another program output to the end of the current output.
     * @param output The output to be appended.
     * @return newly amended output.
     */
    public ProgramOutput append(ProgramOutput output) {
        if (this.error != null) {
            throw new ProgramOutputException("Program output is already errored");
        }

        return this.append(output.getOutput());
    }

    /**
     * Adds a string to the end of the program output as a new line.
     * @param output The string to be appended.
     * @return newly amended output.
     */
    public ProgramOutput appendNewLine(String output) {
        if (this.error != null) {
            throw new ProgramOutputException("Program output is already errored");
        }

        if ("".equals(this.output)) {
            return new ProgramOutput(output);
        }

        String newOutput = this.output + "\n" + output;
        return new ProgramOutput(newOutput);
    }

    /**
     * Joins another program output to the end of the current output after a new line.
     * @param output The output to be appended.
     * @return newly amended output.
     */
    public ProgramOutput appendNewLine(ProgramOutput output) {
        if (this.error != null) {
            throw new ProgramOutputException("Program output is already errored");
        }

        return this.appendNewLine(output.getOutput());
    }

    /**
     * Returns true if the object is another instance of ProgramOutput with the same output and error.
     * @param object the object to be compared
     * @return true if they are equal
     */
    @Override
    public boolean equals(Object object) {
        if (object instanceof ProgramOutput) {
            ProgramOutput other = (ProgramOutput) object;
            return other.getRuntimeError().equals(this.getRuntimeError())
                    && other.output.equals(this.output);
        } else {
            return false;
        }
    }
}
